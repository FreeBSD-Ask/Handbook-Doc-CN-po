# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR The FreeBSD Project
# This file is distributed under the same license as the FreeBSD Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: FreeBSD Documentation VERSION\n"
"POT-Creation-Date: 2022-03-11 21:11+0800\n"
"PO-Revision-Date: 2022-04-03 19:48+0800\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.0.1\n"

#. type: YAML Front Matter: description
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:1
#, no-wrap
msgid "FreeBSD provides binary compatibility with Linux, allowing users to install and run most Linux binaries on a FreeBSD system without having to first modify the binary"
msgstr "FreeBSD 提供了可选的 Linux 二进制兼容层，允许用户安装和运行未经修改的 Linux 二进制程序"

#. type: YAML Front Matter: part
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:1
#, no-wrap
msgid "Part II. Common Tasks"
msgstr "第二部分：通用任务"

#. type: YAML Front Matter: title
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:1
#, no-wrap
msgid "Chapter 10. Linux Binary Compatibility"
msgstr "第10章 Linux 二进制兼容层"

#. type: Title =
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:14
#, no-wrap
msgid "Linux Binary Compatibility"
msgstr "Linux 二进制兼容层"

#. type: Title ==
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:52
#, no-wrap
msgid "Synopsis"
msgstr "概述"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:56
msgid ""
"FreeBSD provides optional binary compatibility with Linux(R), allowing users to install and run unmodified Linux binaries.  It is available for the i386, amd64, and arm64 "
"architectures."
msgstr "FreeBSD 提供了可选的 Linux(R) 二进制兼容层，允许用户安装和运行未经修改的 Linux 二进制程序。它适用于 i386、amd64、arm64 这三个架构。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:58
msgid ""
"Some Linux-specific operating system features are not yet supported; this mostly happens with functionality specific to hardware or related to system management, such as "
"cgroups or namespaces."
msgstr "一些 Linux 特有的功能还没有被支持；这主要是一些硬件特有的功能或与系统管理有关的功能，如 cgroups、namespaces。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:60
msgid "After reading this chapter, you will know:"
msgstr "读完本章后，你将知道："

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:62
msgid "How to enable Linux binary compatibility on a FreeBSD system."
msgstr "如何在 FreeBSD 系统上启用 Linux 二进制兼容层。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:63
msgid "How to install additional Linux shared libraries."
msgstr "如何安装额外的 Linux 依赖库。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:64
msgid "How to install Linux applications on a FreeBSD system."
msgstr "如何在 FreeBSD 系统上安装 Linux 应用程序。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:65
msgid "The implementation details of Linux compatibility in FreeBSD."
msgstr "FreeBSD 中的 Linux 兼容层的实现细节。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:67
msgid "Before reading this chapter, you should:"
msgstr "在阅读本章之前，你应该："

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:69
msgid "Know how to install crossref:ports[ports,additional third-party software]."
msgstr "知道如何安装 crossref:ports[ports,额外的第三方软件]。"

#. type: Title ==
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:71
#, no-wrap
msgid "Configuring Linux Binary Compatibility"
msgstr "配置 Linux 二进制兼容层"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:75
msgid "By default, Linux binary compatibility is not enabled.  To enable it at boot time, add this line to [.filename]#/etc/rc.conf#:"
msgstr "默认情况下，Linux 二进制兼容层没有被启用。在 [.filename]#/etc/rc.conf# 中加入以下这行后便会在系统启动时自动开启："

#. type: delimited block . 4
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:79
#, no-wrap
msgid "linux_enable=\"YES\"\n"
msgstr "linux_enable=\"YES\"\n"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:82
msgid "Once enabled, it can be started without rebooting by running:"
msgstr "添加自动开启后，可以通过运行以下命令启动它而无需重新启动系统："

#. type: delimited block . 4
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:85
#, no-wrap
msgid "# service linux start\n"
msgstr "# service linux start\n"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:90
msgid ""
"The [.filename]#/etc/rc.d/linux# script will load necessary kernel modules and mount filesystems expected by Linux applications under [.filename]#/compat/linux#.  This is "
"enough for statically linked Linux binaries to work.  They can be started in the same way native FreeBSD binaries can; they behave almost exactly like native processes "
"and can be traced and debugged the usual way."
msgstr ""
"[.filename]#/etc/rc.d/linux# 脚本将加载必要的内核模块，并在 [.filename]#/compat/linux# 下挂载 Linux 应用程序所期望的文件系统。这足以让静态链接的 Linux 二进制文件工作。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:93
msgid ""
"Linux binaries linked dynamically (which is the vast majority) also require Linux shared libraries to be installed - they can run on top of the FreeBSD kernel, but they "
"cannot use FreeBSD libraries; this is similar to how 32-bit binaries cannot use native 64-bit libraries.  There are several ways of providing those libraries: one can "
"copy them over from an existing Linux installation using the same architecture, install them from FreeBSD packages, or install using man:deboostrap[8] (from package:"
"sysutils/debootstrap[]), and others."
msgstr ""
"动态链接的 Linux 二进制文件（这是绝大多数）也需要安装 Linux 依赖库——它们可以在 FreeBSD 内核之上运行，但不能使用 FreeBSD 库； 这类似于 32 位二进制文件不能使用本地 64 位库的"
"情况。有几种提供这些库的方法：可以从现有的使用相同架构的 Linux 安装中复制过来，从 FreeBSD 包中安装，或者使用 man:deboostrap[8] (来自 package:sysutils/debootstrap[]) 安装等"
"等。"

#. type: Title ==
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:95
#, no-wrap
msgid "CentOS Base System from FreeBSD Packages"
msgstr "从 FreeBSD 软件包安装 CentOS 基础系统"

#. type: delimited block = 4
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:100
msgid "This method is not yet available for arm64."
msgstr "这种方法还不适用于 arm64。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:103
msgid ""
"The easiest way to install Linux libraries is to install package:emulators/linux_base-c7[] package or port, which places the CentOS 7-derived base system into [."
"filename]#/compat/linux#:"
msgstr "安装 Linux 库的最简单方法是安装 package:emulators/linux_base-c7[] 包或通过 ports，它将 CentOS 7 衍生的基本系统放入 [.filename]#/compat/linux# ："

#. type: delimited block . 4
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:107
#, no-wrap
msgid "# pkg install linux_base-c7\n"
msgstr "# pkg install linux_base-c7\n"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:111
msgid ""
"FreeBSD provides packages for some Linux binary applications.  For example, to install Sublime Text 4, along with all the Linux libraries it depends on, run this command:"
msgstr "FreeBSD 为一些 Linux 二进制应用程序提供了软件包。例如，要安装Sublime Text 4，以及它所依赖的所有 Linux 库，请运行这个命令："

#. type: delimited block . 4
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:114
#, no-wrap
msgid "# pkg install linux-sublime-text4\n"
msgstr "# pkg install linux-sublime-text4\n"

#. type: Title ==
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:117
#, no-wrap
msgid "Debian / Ubuntu Base System with man:debootstrap[8]"
msgstr "使用 man:debootstrap[8] 构建 Debian / Ubuntu 基本系统"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:122
msgid ""
"An alternative way of providing Linux shared libraries is by using package:sysutils/debootstrap[].  This has the advantage of providing a full Debian or Ubuntu "
"distribution.  To use it, follow the instructions at FreeBSD Wiki: https://wiki.freebsd.org/LinuxJails[FreeBSD Wiki - Linux Jails]."
msgstr ""
"另一种提供 Linux 依赖库的方法是使用 package:sysutils/debootstrap[] 。这样做的好处是可以提供一个完整的 Debian 或 Ubuntu 发行版。如要使用它，请参照 FreeBSD Wiki 上的说明： "
"https://wiki.freebsd.org/LinuxJails[FreeBSD Wiki - Linux Jails]。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:124
msgid "After deboostrapping, man:chroot[8] into the newly created directory and install software in a way typical for the Linux distribution inside, for example:"
msgstr "在 deboostrap 之后， man:chroot[8] 进入新创建的目录，以里面的 Linux 发行版的固有方式安装软件，比如："

#. type: delimited block . 4
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:129
#, no-wrap
msgid ""
"# chroot /compat/ubuntu /bin/bash\n"
"root@hostname:/# apt update\n"
msgstr ""
"# chroot /compat/ubuntu /bin/bash\n"
"root@hostname:/# apt update\n"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:134
msgid ""
"It is possible to debootstrap into [.filename]#/compat/linux#, but it is discouraged to avoid collisions with files installed from FreeBSD ports and packages.  Instead, "
"derive the directory name from the distribution or version name, e.g., [.filename]#/compat/ubuntu#.  If the bootstrapped instance is intended to provide Linux shared "
"libraries without having to explicitly use chroot or jails, one can point the kernel at it by updating the `compat.linux.emul_path` sysctl and adding a line like this to "
"[.filename]#/etc/sysctl.conf#:"
msgstr ""
"可以把 debootstrap 放到 [.filename]#/compat/linux# 中，但不建议这样做，以避免与从 FreeBSD ports 和软件包安装的文件发生冲突。而应该从发行版或版本名称中导出目录名称，例如，"
"[.filename]#/compat/ubuntu# 。如果引导的实例旨在提供 Linux 依赖库而不需要明确地使用 chroot 或 jails，可以通过更新 sysctl 的 `compat.linux.emul_path` 来实现，在"
" [.filename]#/etc/sysctl.conf# 中加入这样一行来将内核指向它："

#. type: delimited block . 4
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:138
#, no-wrap
msgid "compat.linux.emul_path=\"/compat/ubuntu\"\n"
msgstr "compat.linux.emul_path=\"/compat/ubuntu\"\n"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:142
msgid ""
"This sysctl controls the kernel's path translation mechanism; see man:linux[4] for details.  Please note that changing it might cause trouble for Linux applications "
"installed from FreeBSD packages; one reason is that many of those applications are still 32-bit, while Ubuntu seems to be deprecating 32-bit library support."
msgstr ""
"这个 sysctl 控制内核的路径转换机制，详情见 man:linux[4]。请注意，改变它可能会给使用 FreeBSD 软件包安装的 Linux 应用程序带来麻烦；原因之一是许多应用程序仍然是 32 位的，而 "
"Ubuntu 似乎正在取消对 32 位库的支持。"

#. type: Title ==
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:144
#, no-wrap
msgid "Advanced Topics"
msgstr "高级主题"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:148
msgid "The Linux compatibility layer is a work in progress.  Consult https://wiki.freebsd.org/Linuxulator[FreeBSD Wiki - Linuxulator] for more information."
msgstr "Linux 兼容层是一项正在进行的工作。有关更多信息请参阅 https://wiki.freebsd.org/Linuxulator[FreeBSD Wiki - Linuxulator] 。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:150
msgid "A list of all Linux-related man:sysctl[8] knobs can be found in man:linux[4]."
msgstr "所有与 Linux 相关的 man:sysctl[8] 旋钮列表都可以在 man:linux[4] 中找到。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:153
msgid ""
"Some applications require specific filesystems to be mounted.  This is normally handled by the [.filename]#/etc/rc.d/linux# script, but can be disabled by adding this "
"line to [.filename]#/etc/rc.conf#:"
msgstr "一些应用程序要求挂载特定的文件系统。这一般由 [.filename]#/etc/rc.d/linux# 文件决定，但可以通过在 [.filename]#/etc/rc.conf# 中添加这一行来禁用："

#. type: delimited block . 4
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:157
#, no-wrap
msgid "linux_mounts_enable=\"NO\"\n"
msgstr "linux_mounts_enable=\"NO\"\n"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:160
msgid "Filesystems mounted by the rc script will not work for Linux processes inside chroots or jails; if needed, configure them in [.filename]#/etc/fstab#:"
msgstr "由 rc 脚本挂载的文件系统不适用于 chroots 或 jail 中的 Linux 进程；如果需要，可以在 [.filename]#/etc/fstab# 中配置它们："

#. type: delimited block . 4
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:166
#, no-wrap
msgid ""
"devfs      /compat/linux/dev      devfs      rw,late                    0  0\n"
"tmpfs      /compat/linux/dev/shm  tmpfs      rw,late,size=1g,mode=1777  0  0\n"
"fdescfs    /compat/linux/dev/fd   fdescfs    rw,late,linrdlnk           0  0\n"
"linprocfs  /compat/linux/proc     linprocfs  rw,late                    0  0\n"
"linsysfs   /compat/linux/sys      linsysfs   rw,late                    0  0\n"
msgstr ""
"devfs      /compat/linux/dev      devfs      rw,late                    0  0\n"
"tmpfs      /compat/linux/dev/shm  tmpfs      rw,late,size=1g,mode=1777  0  0\n"
"fdescfs    /compat/linux/dev/fd   fdescfs    rw,late,linrdlnk           0  0\n"
"linprocfs  /compat/linux/proc     linprocfs  rw,late                    0  0\n"
"linsysfs   /compat/linux/sys      linsysfs   rw,late                    0  0\n"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:169
msgid ""
"Since the Linux binary compatibility layer has gained support for running both 32- and 64-bit Linux binaries (on 64-bit x86 hosts), it is no longer possible to link the "
"emulation functionality statically into a custom kernel."
msgstr "由于 Linux 二进制兼容层已经获得了对运行 32 位和 64 位 Linux 二进制程序的支持（在 64 位 x86 主机上），因此不再可能将仿真功能静态地链接到自定义内核中。"

#. type: Title ===
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:171
#, no-wrap
msgid "Installing Additional Libraries Manually"
msgstr "手动安装其他库"

#. type: delimited block = 4
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:176
msgid "For base system subdirectories created with man:debootstrap[8], use the instructions above instead."
msgstr "对于用 man:debootstrap[8] 创建的基本系统子目录，请参考上面的说明。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:179
msgid ""
"If a Linux application complains about missing shared libraries after configuring Linux binary compatibility, determine which shared libraries the Linux binary needs and "
"install them manually."
msgstr "如果某个 Linux 应用程序在配置了 Linux 二进制程序兼容性后，仍警告缺少依赖库，请确定 Linux 二进制程序需要哪些依赖库，并手动安装它们。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:182
msgid ""
"From a Linux system using the same CPU architecture, `ldd` can be used to determine which shared libraries the application needs.  For example, to check which shared "
"libraries `linuxdoom` needs, run this command from a Linux system that has Doom installed:"
msgstr ""
"在一个使用相同 CPU 架构的 Linux 系统中，`ldd` 可以用来确定应用程序需要哪些依赖库。例如，要检查 `linuxdoom` 需要哪些依赖库，可以从安装了 Doom 的 Linux 系统上运行这个命令："

#. type: delimited block . 4
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:189
#, no-wrap
msgid ""
"% ldd linuxdoom\n"
"libXt.so.3 (DLL Jump 3.1) => /usr/X11/lib/libXt.so.3.1.0\n"
"libX11.so.3 (DLL Jump 3.1) => /usr/X11/lib/libX11.so.3.1.0\n"
"libc.so.4 (DLL Jump 4.5pl26) => /lib/libc.so.4.6.29\n"
msgstr ""
"% ldd linuxdoom\n"
"libXt.so.3 (DLL Jump 3.1) => /usr/X11/lib/libXt.so.3.1.0\n"
"libX11.so.3 (DLL Jump 3.1) => /usr/X11/lib/libX11.so.3.1.0\n"
"libc.so.4 (DLL Jump 4.5pl26) => /lib/libc.so.4.6.29\n"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:194
msgid ""
"Then, copy all the files in the last column of the output from the Linux system into [.filename]#/compat/linux# on the FreeBSD system.  Once copied, create symbolic links "
"to the names in the first column.  This example will result in the following files on the FreeBSD system:"
msgstr ""
"然后，将 Linux 系统输出的最后一栏中的所有文件复制到 FreeBSD 系统的 [.filename]#/compat/linux# 中。复制完后，建立符号链接 (Symbolic link) 至输出结果第一栏的名称。此示例将"
"在 FreeBSD 系统上生成以下文件："

#. type: delimited block . 4
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:203
#, no-wrap
msgid ""
"/compat/linux/usr/X11/lib/libXt.so.3.1.0\n"
"/compat/linux/usr/X11/lib/libXt.so.3 -> libXt.so.3.1.0\n"
"/compat/linux/usr/X11/lib/libX11.so.3.1.0\n"
"/compat/linux/usr/X11/lib/libX11.so.3 -> libX11.so.3.1.0\n"
"/compat/linux/lib/libc.so.4.6.29\n"
"/compat/linux/lib/libc.so.4 -> libc.so.4.6.29\n"
msgstr ""
"/compat/linux/usr/X11/lib/libXt.so.3.1.0\n"
"/compat/linux/usr/X11/lib/libXt.so.3 -> libXt.so.3.1.0\n"
"/compat/linux/usr/X11/lib/libX11.so.3.1.0\n"
"/compat/linux/usr/X11/lib/libX11.so.3 -> libX11.so.3.1.0\n"
"/compat/linux/lib/libc.so.4.6.29\n"
"/compat/linux/lib/libc.so.4 -> libc.so.4.6.29\n"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:208
msgid ""
"If a Linux shared library already exists with a matching major revision number to the first column of the `ldd` output, it does not need to be copied to the file named in "
"the last column, as the existing library should work.  It is advisable to copy the shared library if it is a newer version, though.  The old one can be removed, as long "
"as the symbolic link points to the new one."
msgstr ""
"如果一个 Linux 依赖库已经存在，并符合 `ldd` 输出结果第一栏的主要修订版号，则不需要复制该行最后一栏文件，因为现有的库应该可以工作。不过，如果依赖库是一个较新的版本，建议复"
"制它。旧的可以删除，只要符号链接指向新的就可以了。若有较新的版本建议仍要复制依赖库，只要符号链接指向新版的库，便可移除旧版。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:210
msgid "For example, these libraries already exist on the FreeBSD system:"
msgstr "例如，这些库已经存在于 FreeBSD 系统中："

#. type: delimited block . 4
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:215
#, no-wrap
msgid ""
"/compat/linux/lib/libc.so.4.6.27\n"
"/compat/linux/lib/libc.so.4 -> libc.so.4.6.27\n"
msgstr ""
"/compat/linux/lib/libc.so.4.6.27\n"
"/compat/linux/lib/libc.so.4 -> libc.so.4.6.27\n"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:218
msgid "and `ldd` indicates that a binary requires a later version:"
msgstr "且 `ldd` 输出显示二进制程序需要较新的版本："

#. type: delimited block . 4
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:222
#, no-wrap
msgid "libc.so.4 (DLL Jump 4.5pl26) -> libc.so.4.6.29\n"
msgstr "libc.so.4 (DLL Jump 4.5pl26) -> libc.so.4.6.29\n"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:226
msgid ""
"Since the existing library is only one or two versions out of date in the last digit, the program should still work with the slightly older version.  However, it is safe "
"to replace the existing [.filename]#libc.so# with the newer version:"
msgstr "虽然现有的库只迭代了一两个小版本，程序仍然可以使用稍旧的版本。但是，安全起见建议用新版本替换现有的 [.filename]#libc.so# ："

#. type: delimited block . 4
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:231
#, no-wrap
msgid ""
"/compat/linux/lib/libc.so.4.6.29\n"
"/compat/linux/lib/libc.so.4 -> libc.so.4.6.29\n"
msgstr ""
"/compat/linux/lib/libc.so.4.6.29\n"
"/compat/linux/lib/libc.so.4 -> libc.so.4.6.29\n"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:235
msgid ""
"Generally, one will need to look for the shared libraries that Linux binaries depend on only the first few times that a Linux program is installed on FreeBSD.  After a "
"while, there will be a sufficient set of Linux shared libraries on the system to be able to run newly installed Linux binaries without any extra work."
msgstr ""
"一般来说，只有在 FreeBSD 上安装 Linux 程序的前几次，才需要寻找 Linux 二进制程序所依赖的依赖库。一段时间后，系统中就会有足够的 Linux 依赖库，不需要额外的工作能够运行新安装"
"的 Linux 二进制程序。"

#. type: Title ===
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:236
#, no-wrap
msgid "Branding Linux ELF Binaries"
msgstr "标记 Linux ELF 二进制文件"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:240
msgid ""
"The FreeBSD kernel uses several methods to determine if the binary to be executed is a Linux one: it checks the brand in the ELF file header, looks for known ELF "
"interpreter paths and checks ELF notes; finally, by default, unbranded ELF executables are assumed to be Linux anyway.  Should all those methods fail, an attempt to "
"execute the binary might result in error message:"
msgstr ""
"FreeBSD 内核使用几种方法来确定要执行的二进制文件是否是 Linux 的：它检查 ELF 文件头中的标记，寻找已知的 ELF 解释器路径，并检查 ELF 注释；最后，默认情况下，没有标记的 ELF 可"
"执行文件被认定为是 Linux 的。如果这些方法都失败，尝试执行二进制文件可能会产生错误信息："

#. type: delimited block . 4
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:246
#, no-wrap
msgid ""
"% ./my-linux-elf-binary\n"
"ELF binary type not known\n"
"Abort\n"
msgstr ""
"% ./my-linux-elf-binary\n"
"ELF binary type not known\n"
"Abort\n"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:249
msgid "To help the FreeBSD kernel distinguish between a FreeBSD ELF binary and a Linux binary, use man:brandelf[1]:"
msgstr "为了帮助 FreeBSD 内核区分是 FreeBSD ELF 二进制程序 还是 Linux 二进制程序，可以使用 man:brandelf[1]："

#. type: delimited block . 4
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:253
#, no-wrap
msgid "% brandelf -t Linux my-linux-elf-binary\n"
msgstr "% brandelf -t Linux my-linux-elf-binary\n"

#. type: Title ===
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:255
#, no-wrap
msgid "Installing a Linux RPM Based Application"
msgstr "安装基于 Linux RPM 的应用程序"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:259
msgid ""
"To install a Linux RPM-based application, first install the package:archivers/rpm4[] package or port.  Once installed, `root` can use this command to install a [."
"filename]#.rpm#:"
msgstr "要安装基于 Linux RPM 的应用程序，首先安装 package:archivers/rpm4[] 套件或 Port 。安装后，`root` 可以使用此命令安装 [.filename]#.rpm#："

#. type: delimited block . 4
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:264
#, no-wrap
msgid ""
"# cd /compat/linux\n"
"# rpm2cpio < /path/to/linux.archive.rpm | cpio -id\n"
msgstr ""
"# cd /compat/linux\n"
"# rpm2cpio < /path/to/linux.archive.rpm | cpio -id\n"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:268
msgid "If necessary, `brandelf` the installed ELF binaries.  Note that this will prevent a clean uninstall."
msgstr "如有必要，`brandelf` 已安装的 ELF 二进制程序。注意，这将无法干净地卸载他。"

#. type: Title ===
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:269
#, no-wrap
msgid "Configuring the Hostname Resolver"
msgstr ".配置域名解析"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:272
msgid "If DNS does not work or this error appears:"
msgstr "如果 DNS 解析故障或出现这个错误："

#. type: delimited block . 4
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:277
#, no-wrap
msgid ""
"resolv+: \"bind\" is an invalid keyword resolv+:\n"
"\"hosts\" is an invalid keyword\n"
msgstr ""
"resolv+: \"bind\" is an invalid keyword resolv+:\n"
"\"hosts\" is an invalid keyword\n"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:280
msgid "configure [.filename]#/compat/linux/etc/host.conf# as follows:"
msgstr "请配置 [.filename]#/compat/linux/etc/host.conf# 文件，如下："

#. type: delimited block . 4
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:285
#, no-wrap
msgid ""
"order hosts, bind\n"
"multi on\n"
msgstr ""
"order hosts, bind\n"
"multi on\n"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:290
msgid ""
"This specifies that [.filename]#/etc/hosts# is searched first and DNS is searched second.  When [.filename]#/compat/linux/etc/host.conf# does not exist, Linux "
"applications use [.filename]#/etc/host.conf# and complain about the incompatible FreeBSD syntax.  Remove `bind` if a name server is not configured using [.filename]#/etc/"
"resolv.conf#."
msgstr ""
"上面的配置指定了先搜寻 [.filename]#/etc/hosts# ，其次搜索 DNS 。当 [.filename]#/compat/linux/etc/host.conf# 不存在时，Linux 应用程序会使用 [.filename]#/etc/host.conf# 并会"
"警告与 FreeBSD 不相容的语法。如果没有使用 [.filename]#/etc/resolv.conf# 配置域名服务器，则可删除 `bind` 。"

#. type: Title ===
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:292
#, no-wrap
msgid "Miscellaneous"
msgstr "其他"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:295
msgid ""
"This section describes how Linux binary compatibility works and is based on an email written to {freebsd-chat} by Terry Lambert mailto:tlambert@primenet."
"com[tlambert@primenet.com] (Message ID: `<199906020108.SAA07001@usr09.primenet.com>`)."
msgstr ""
"这一节描述了 Linux 二进制兼容性的工作原理，它基于 Terry Lambert 写给 {freebsd-chat} 的一封邮件 mailto:tlambert@primenet.com[tlambert@primenet.com]  (邮件 ID: "
"`<199906020108.SAA07001@usr09.primenet.com>`)。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:298
msgid "FreeBSD has an abstraction called an \"execution class loader\".  This is a wedge into the man:execve[2] system call."
msgstr "FreeBSD 有一个叫做“执行类加载器”的抽象概念。这是一个楔入 man:execve[2] 系统调用的工具。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:300
msgid ""
"Historically, the UNIX(R) loader examined the magic number (generally the first 4 or 8 bytes of the file) to see if it was a binary known to the system, and if so, "
"invoked the binary loader."
msgstr "以前，UNIX(R) 加载器检查幻数（通常是文件的前 4 或 8 个字节），看它是否是系统已知的二进制文件，如果是，则调用二进制加载器。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:303
msgid ""
"If it was not the binary type for the system, the man:execve[2] call returned a failure, and the shell attempted to start executing it as shell commands.  The assumption "
"was a default of \"whatever the current shell is\"."
msgstr "如果它是系统未知的二进制类型，man:execve[2] 调用就会返回失败，并且 shell 尝试将其作为 shell 命令开始执行。该假设是“无论当前的 shell 是什么”的默认设置。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:305
msgid "Later, a hack was made for man:sh[1] to examine the first two characters, and if they were `:\\n`, it invoked the man:csh[1] shell instead."
msgstr "后来，对 man:sh[1] 进行了修改，检查前两个字符，如果它们是 :\\n，则改为调用 man:csh[1] shell。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:307
msgid "FreeBSD has a list of loaders, instead of a single loader, with a fallback to the `#!` loader for running shell interpreters or shell scripts."
msgstr "FreeBSD 有一个加载器列表，而不是单个加载器，并带有 `#!` 用于运行 shell 解释器或 shell 脚本的加载程序。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:310
msgid ""
"For the Linux ABI support, FreeBSD sees the magic number as an ELF binary.  The ELF loader looks for a specialized _brand_, which is a comment section in the ELF image, "
"and which is not present on SVR4/Solaris(TM) ELF binaries."
msgstr ""
"对于 Linux ABI 支持，FreeBSD 将幻数视为 ELF 二进制文件。ELF 加载程序会寻找一个专门的品牌，它是 ELF 映像中的一个注释部分，并且在 SVR4/Solaris(TM) ELF 二进制文件中不存在。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:312
msgid "For Linux binaries to function, they must be _branded_ as type `Linux` using man:brandelf[1]:"
msgstr "要使 Linux 二进制文件正常运行，必须使用 man:brandelf[1] 将它们标记为 `Linux` 类型："

#. type: delimited block . 4
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:316
#, no-wrap
msgid "# brandelf -t Linux file\n"
msgstr "# brandelf -t Linux file\n"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:321
msgid ""
"When the ELF loader sees the `Linux` brand, the loader replaces a pointer in the `proc` structure.  All system calls are indexed through this pointer.  In addition, the "
"process is flagged for special handling of the trap vector for the signal trampoline code, and several other (minor) fix-ups that are handled by the Linux kernel module."
msgstr ""
"当 ELF 加载器看到 `Linux` 品牌时，加载器会替换 `proc` 结构中的一个指针。所有系统调用都通过这个指针进行索引。此外，该进程被标记为 signal trampoline 的陷阱向量进行特殊处理，"
"以及由 Linux 内核模块处理的其他几个（次要）修复。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:323
msgid "The Linux system call vector contains, among other things, a list of `sysent[]` entries whose addresses reside in the kernel module."
msgstr "Linux 系统调用向量包含一个 `sysent[]` 条目列表，其地址位于内核模块中。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:325
msgid ""
"When a system call is called by the Linux binary, the trap code dereferences the system call function pointer off the `proc` structure, and gets the Linux, not the "
"FreeBSD, system call entry points."
msgstr "当一个系统调用被 Linux 二进制文件调用时，陷阱代码会解除对 `proc` 结构中系统调用函数指针的引用，并获得 Linux 而不是 FreeBSD 的系统调用入口点。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:333
msgid ""
"Linux mode dynamically _reroots_ lookups.  This is, in effect, equivalent to `union` to file system mounts.  First, an attempt is made to look up the file in [.filename]#/"
"compat/linux/original-path#.  If that fails, the lookup is done in [.filename]#/original-path#.  This makes sure that binaries that require other binaries can run.  For "
"example, the Linux toolchain can all run under Linux ABI support.  It also means that the Linux binaries can load and execute FreeBSD binaries, if there are no "
"corresponding Linux binaries present, and that a man:uname[1] command can be placed in the [.filename]#/compat/linux# directory tree to ensure that the Linux binaries "
"cannot tell they are not running on Linux."
msgstr ""
"Linux模式下动态 _reroots_ 查询。这实际上等同于文件系统挂载的 `union` 。首先，尝试在 [.filename]#/compat/linux/original-path# 中查找文件。如果失败，则在 [.filename]#/"
"original-path# 中进行查找。这确保了需要其他二进制文件的二进制文件能够运行。例如，Linux 工具链都可以在 Linux ABI 支持下运行。这也意味着，如果没有相应的 Linux 二进制文件存"
"在，Linux 二进制文件可以加载和执行 FreeBSD 二进制文件，并且可以在 [.filename]#/compat/linux# 目录树下放置 man:uname[1] 命令，以确保 Linux 二进制文件无法知道它们不是在 "
"Linux 上运行。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:338
msgid ""
"In effect, there is a Linux kernel in the FreeBSD kernel.  The various underlying functions that implement all of the services provided by the kernel are identical to "
"both the FreeBSD system call table entries, and the Linux system call table entries: file system operations, virtual memory operations, signal delivery, and System V "
"IPC.  The only difference is that FreeBSD binaries get the FreeBSD _glue_ functions, and Linux binaries get the Linux _glue_ functions.  The FreeBSD _glue_ functions are "
"statically linked into the kernel, and the Linux _glue_ functions can be statically linked, or they can be accessed via a kernel module."
msgstr ""
"实际上，在 FreeBSD 的内核中就有一个 Linux 内核。实现内核所提供的所有服务的各种底层函数与 FreeBSD 系统调用表项和 Linux 系统调用表项都是相同的：件系统操作，虚拟内存操作，信"
"号传递，以及 System V IPC 。唯一的区别是 FreeBSD 二进制文件得到 FreeBSD 的 _glue_ 函数，而 Linux 二进制文件得到 Linux 的 _glue_ 函数。FreeBSD 的 _glue_ 函数是静态链接到内"
"核的，而 Linux 的 _glue_ 函数可以是静态链接的，也可以通过内核模块访问。"

#. type: Plain text
#: content/zh-cn/books/handbook/linuxemu/_index.adoc:341
msgid ""
"Technically, this is not really emulation, it is an ABI implementation.  It is sometimes called \"Linux emulation\" because the implementation was done at a time when "
"there was no other word to describe what was going on.  Saying that FreeBSD ran Linux binaries was not true, since the code was not compiled in."
msgstr ""
"从技术上讲，这并不是真正的仿真，而是 ABI 的实现。它有时被称为 “Linux 仿真”，因为这个实现是在没有其他词来描述所发生的事情的时候完成的。说 FreeBSD 运行 Linux 二进制文件是不正"
"确的，因为这些代码没有被编译进去。"
